memberSearchIndex = [{"p":"com.github.basking2.sdsai.itrex.packages","c":"DictPackage","l":"__package"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"StringPackage","l":"__package"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractAggregatingFunction","l":"AbstractAggregatingFunction(R)","u":"%3Cinit%3E(R)"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"AbstractBooleanFunction","l":"AbstractBooleanFunction(Boolean)","u":"%3Cinit%3E(java.lang.Boolean)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractFunction1","l":"AbstractFunction1()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractFunction2","l":"AbstractFunction2()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractFunction3","l":"AbstractFunction3()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"Functions","l":"aggregator(R, BiFunction<R, T, R>)","u":"aggregator(R,java.util.function.BiFunction)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"BooleanPackage","l":"and"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"AndFunction","l":"AndFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"AugmentableIterator","l":"append(Iterator<T>)","u":"append(java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"AugmentableIterator","l":"append(T)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractAggregatingFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractFunction1","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractFunction2","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractFunction3","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"CompareFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"CaseFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"CaseListFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"DefaultCaseFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"EvalItrmlFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"FilterFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"FlattenFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ForFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"ArgFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"ArgsFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"FnFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"FunctionFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"HasArgFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"HashArgsFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"NameArgsFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"RegisterFunctionFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.functional","c":"ComposeFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.functional","c":"CurryFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.functional","c":"PipelineFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ImportFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"JoinFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"LetFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ListFlattenFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"LogFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"NopFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"PrintArgsFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"RangeFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"StringConcatFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"StringJoinFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ThreadFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"TraceFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"VersionFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ZipFunction","l":"apply(Iterator<?>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"DictFunction","l":"apply(Iterator<? extends Object>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"HelpFunction","l":"apply(Iterator<? extends Object>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"IfFunction","l":"apply(Iterator<? extends Object>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"LastFunction","l":"apply(Iterator<? extends Object>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ListFunction","l":"apply(Iterator<? extends Object>, EvaluationContext)","u":"apply(java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.functional","c":"CallFlattenedFunction","l":"applyImpl(FunctionInterface<Object>, Iterator<?>, EvaluationContext)","u":"applyImpl(com.github.basking2.sdsai.itrex.functions.FunctionInterface,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.functional","c":"MapFunction","l":"applyImpl(FunctionInterface<Object>, Iterator<?>, EvaluationContext)","u":"applyImpl(com.github.basking2.sdsai.itrex.functions.FunctionInterface,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.functional","c":"FoldLeftFunction","l":"applyImpl(FunctionInterface<Object>, Object, Iterator<?>, EvaluationContext)","u":"applyImpl(com.github.basking2.sdsai.itrex.functions.FunctionInterface,java.lang.Object,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"GetFunction","l":"applyImpl(Object, Iterator<?>, EvaluationContext)","u":"applyImpl(java.lang.Object,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.java","c":"JavaNewFunction","l":"applyImpl(Object, Iterator<?>, EvaluationContext)","u":"applyImpl(java.lang.Object,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"SetFunction","l":"applyImpl(Object, Object, Iterator<?>, EvaluationContext)","u":"applyImpl(java.lang.Object,java.lang.Object,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"UpdateFunction","l":"applyImpl(Object, Object, Iterator<?>, EvaluationContext)","u":"applyImpl(java.lang.Object,java.lang.Object,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.java","c":"ClassOfFunction","l":"applyImpl(String, Iterator<?>, EvaluationContext)","u":"applyImpl(java.lang.String,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.java","c":"JavaFunction","l":"applyImpl(String, Object, Iterator<?>, EvaluationContext)","u":"applyImpl(java.lang.String,java.lang.Object,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"StringSplitFunction","l":"applyImpl(String, String, Iterator<?>, EvaluationContext)","u":"applyImpl(java.lang.String,java.lang.String,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractFunction1","l":"applyImpl(T, Iterator<?>, EvaluationContext)","u":"applyImpl(T,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractFunction2","l":"applyImpl(T1, T2, Iterator<?>, EvaluationContext)","u":"applyImpl(T1,T2,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractFunction3","l":"applyImpl(T1, T2, T3, Iterator<?>, EvaluationContext)","u":"applyImpl(T1,T2,T3,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"AbstractBooleanFunction","l":"applyT(Boolean, Object)","u":"applyT(java.lang.Boolean,java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractAggregatingFunction","l":"applyT(R, T)","u":"applyT(R,T)"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"ArgFunction","l":"ArgFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"ArgsFunction","l":"ArgsFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.util","c":"Arguments","l":"Arguments()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"AugmentableIterator","l":"AugmentableIterator()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"BasePackage","l":"BasePackage()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"BLOCK_COMMENT"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"BOOLEAN"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"AbstractBooleanFunction","l":"booleanOperation(Boolean, Boolean)","u":"booleanOperation(java.lang.Boolean,java.lang.Boolean)"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"AndFunction","l":"booleanOperation(Boolean, Boolean)","u":"booleanOperation(java.lang.Boolean,java.lang.Boolean)"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"NotFunction","l":"booleanOperation(Boolean, Boolean)","u":"booleanOperation(java.lang.Boolean,java.lang.Boolean)"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"OrFunction","l":"booleanOperation(Boolean, Boolean)","u":"booleanOperation(java.lang.Boolean,java.lang.Boolean)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"BooleanPackage","l":"BooleanPackage()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"BufferIterator","l":"BufferIterator(int, Iterator<T>)","u":"%3Cinit%3E(int,java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ByteBufferInputStreamIteator","l":"ByteBufferInputStreamIteator(InputStream)","u":"%3Cinit%3E(java.io.InputStream)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"FunctionalPackage","l":"callFlattened"},{"p":"com.github.basking2.sdsai.itrex.functions.functional","c":"CallFlattenedFunction","l":"CallFlattenedFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.util","c":"WorkStealingFuture","l":"cancel(boolean)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"CaseFunction","l":"CaseFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"CaseListFunction","l":"CaseListFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"CastingPackage","l":"CastingPackage()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"JavaPackage","l":"classOf"},{"p":"com.github.basking2.sdsai.itrex.functions.java","c":"ClassOfFunction","l":"ClassOfFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"CLOSE_BRACKET"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"CloseableUncertainIterator","l":"close()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"CloseableUncertainIterator","l":"CloseableUncertainIterator()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"CloseableUncertainIterator","l":"CloseableUncertainIterator(Queue<T>)","u":"%3Cinit%3E(java.util.Queue)"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"COMMA"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionGenerator.CommentBlock","l":"CommentBlock(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"CompareFunction","l":"CompareFunction(CompareFunction.OP)","u":"%3Cinit%3E(com.github.basking2.sdsai.itrex.functions.bool.CompareFunction.OP)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"FunctionalPackage","l":"compose"},{"p":"com.github.basking2.sdsai.itrex.functions.functional","c":"ComposeFunction","l":"ComposeFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"StringPackage","l":"concat"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractAggregatingFunction.Result","l":"cont"},{"p":"com.github.basking2.sdsai.itrex","c":"EvaluationContext","l":"containsKey(Object)","u":"containsKey(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"FunctionalPackage","l":"curry"},{"p":"com.github.basking2.sdsai.itrex.functions.functional","c":"CurryFunction","l":"CurryFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"LogFunction.LEVEL","l":"DEBUG"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"DefaultCaseFunction","l":"DefaultCaseFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"DictFunction","l":"DictFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"DictPackage","l":"DictPackage()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"DOUBLE"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"EMPTY_ITERATOR"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"emptyIterator()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"BooleanPackage","l":"eq"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"CompareFunction.OP","l":"EQ"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TwoTuple","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"LogFunction.LEVEL","l":"ERROR"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"EvalItrmlFunction","l":"EvalItrmlFunction(Evaluator)","u":"%3Cinit%3E(com.github.basking2.sdsai.itrex.Evaluator)"},{"p":"com.github.basking2.sdsai.itrex","c":"Evaluator","l":"evaluate(EvaluatingIterator<Object>)","u":"evaluate(com.github.basking2.sdsai.itrex.iterators.EvaluatingIterator)"},{"p":"com.github.basking2.sdsai.itrex","c":"Evaluator","l":"evaluate(Object)","u":"evaluate(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex","c":"Evaluator","l":"evaluate(Object, EvaluationContext)","u":"evaluate(java.lang.Object,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"EvaluatingIterator","l":"EvaluatingIterator(Evaluator, EvaluationContext, Iterator<Object>)","u":"%3Cinit%3E(com.github.basking2.sdsai.itrex.Evaluator,com.github.basking2.sdsai.itrex.EvaluationContext,java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex","c":"EvaluationContext","l":"EvaluationContext()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex","c":"EvaluationContext","l":"EvaluationContext(EvaluationContext, Iterator<?>)","u":"%3Cinit%3E(com.github.basking2.sdsai.itrex.EvaluationContext,java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex","c":"EvaluationContext","l":"EvaluationContext(Map<Object, Object>, Map<Object, FunctionInterface<? extends Object>>, Iterator<?>, EvaluationContext)","u":"%3Cinit%3E(java.util.Map,java.util.Map,java.util.Iterator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"EvalItrmlFunction","l":"evaluator"},{"p":"com.github.basking2.sdsai.itrex","c":"Evaluator","l":"Evaluator()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex","c":"Evaluator","l":"Evaluator(Executor)","u":"%3Cinit%3E(java.util.concurrent.Executor)"},{"p":"com.github.basking2.sdsai.itrex","c":"Evaluator","l":"Evaluator(Executor, EvaluationContext)","u":"%3Cinit%3E(java.util.concurrent.Executor,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.util","c":"WorkStealingFuture","l":"execute(Executor, Callable<T>)","u":"execute(java.util.concurrent.Executor,java.util.concurrent.Callable)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"BooleanPackage","l":"f"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"UncertainIterator.HAS_NEXT","l":"FALSE"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"FilterFunction","l":"FilterFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"filterIterator(Iterator<T>, Predicate<T>)","u":"filterIterator(java.util.Iterator,java.util.function.Predicate)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"FilterIterator","l":"FilterIterator(Iterator<T>, Predicate<T>)","u":"%3Cinit%3E(java.util.Iterator,java.util.function.Predicate)"},{"p":"com.github.basking2.sdsai.itrex.functions.java","c":"JavaNewFunction","l":"findConstructor(Class<?>, Class<?>[])","u":"findConstructor(java.lang.Class,java.lang.Class[])"},{"p":"com.github.basking2.sdsai.itrex.functions.java","c":"JavaFunction","l":"findMethod(Class<?>, String, Class<?>[])","u":"findMethod(java.lang.Class,java.lang.String,java.lang.Class[])"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"FIRST_QUOTE"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"flatten(Iterator<Iterator<T>>)","u":"flatten(java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"FlattenFunction","l":"FlattenFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"FLOAT"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"FnFunction","l":"FnFunction(Evaluator)","u":"%3Cinit%3E(com.github.basking2.sdsai.itrex.Evaluator)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"FunctionalPackage","l":"fold"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"FunctionalPackage","l":"foldLeft"},{"p":"com.github.basking2.sdsai.itrex.functions.functional","c":"FoldLeftFunction","l":"FoldLeftFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ForFunction","l":"ForFunction(Evaluator)","u":"%3Cinit%3E(com.github.basking2.sdsai.itrex.Evaluator)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"FunctionalPackage","l":"FunctionalPackage()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex","c":"EvaluationContext","l":"functionCall(EvaluationContext, Iterator<?>)","u":"functionCall(com.github.basking2.sdsai.itrex.EvaluationContext,java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"FunctionFunction","l":"FunctionFunction(Evaluator)","u":"%3Cinit%3E(com.github.basking2.sdsai.itrex.Evaluator)"},{"p":"com.github.basking2.sdsai.itrex.functions.functional","c":"CurryFunction","l":"functionHelp(String, boolean)","u":"functionHelp(java.lang.String,boolean)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"HelpfulFunction","l":"functionHelp(String, boolean)","u":"functionHelp(java.lang.String,boolean)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"HelpFunction","l":"functionHelp(String, boolean)","u":"functionHelp(java.lang.String,boolean)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"LetFunction","l":"functionHelp(String, boolean)","u":"functionHelp(java.lang.String,boolean)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ListFlattenFunction","l":"functionHelp(String, boolean)","u":"functionHelp(java.lang.String,boolean)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"Functions","l":"Functions()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"FutureIterator","l":"FutureIterator(Iterator<T>, Executor)","u":"%3Cinit%3E(java.util.Iterator,java.util.concurrent.Executor)"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionGenerator","l":"generate()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"DictPackage","l":"get"},{"p":"com.github.basking2.sdsai.itrex.util","c":"WorkStealingFuture","l":"get()"},{"p":"com.github.basking2.sdsai.itrex.util","c":"WorkStealingFuture","l":"get(long, TimeUnit)","u":"get(long,java.util.concurrent.TimeUnit)"},{"p":"com.github.basking2.sdsai.itrex","c":"EvaluationContext","l":"get(Object)","u":"get(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex","c":"EvaluationContext","l":"getAllFunctions()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"Functions","l":"getArgument(Iterator<?>, String)","u":"getArgument(java.util.Iterator,java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex","c":"EvaluationContext","l":"getArguments()"},{"p":"com.github.basking2.sdsai.itrex","c":"Evaluator","l":"getChildEvaluationContext()"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionGenerator.CommentBlock","l":"getContents()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"EvaluatingIterator","l":"getEvaluationContext()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"GetFunction","l":"GetFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex","c":"EvaluationContext","l":"getFunction(Object)","u":"getFunction(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TwoTuple","l":"getL()"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"getPosition()"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TwoTuple","l":"getR()"},{"p":"com.github.basking2.sdsai.itrex","c":"Evaluator","l":"getRootEvaluationContext()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"BooleanPackage","l":"gt"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"CompareFunction.OP","l":"GT"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"BooleanPackage","l":"gte"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"CompareFunction.OP","l":"GTE"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"HasArgFunction","l":"HasArgFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"HashArgsFunction","l":"HashArgsFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TwoTuple","l":"hashCode()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"AugmentableIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"BufferIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ByteBufferInputStreamIteator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"EvaluatingIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"FilterIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"FutureIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"HeadIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"IteratorIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"MappingIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"NullSkippingIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"PagingIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ParallelIteratorIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ParallelMappingIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"RangeIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"CloseableUncertainIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"JoinUncertainIteratorsIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"MappingUncertainIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"SplitMapUncertainIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"UncertainIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ZipIterator","l":"hasNext()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"HeadIterator","l":"HeadIterator(int, Iterator<T>)","u":"%3Cinit%3E(int,java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"HeadIterator","l":"HeadIterator(Iterator<T>)","u":"%3Cinit%3E(java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"HelpFunction","l":"HelpFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"IfFunction","l":"IfFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex","c":"Evaluator","l":"importBase()"},{"p":"com.github.basking2.sdsai.itrex","c":"Evaluator","l":"importDefaults()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"IteratorPackage","l":"importFlatten2(Evaluator, String)","u":"importFlatten2(com.github.basking2.sdsai.itrex.Evaluator,java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ImportFunction","l":"ImportFunction(Evaluator, EvaluationContext)","u":"%3Cinit%3E(com.github.basking2.sdsai.itrex.Evaluator,com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"BasePackage","l":"importTo(Evaluator, String)","u":"importTo(com.github.basking2.sdsai.itrex.Evaluator,java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"IteratorPackage","l":"importTo(Evaluator, String)","u":"importTo(com.github.basking2.sdsai.itrex.Evaluator,java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"JavaMathPackage","l":"importTo(Evaluator, String)","u":"importTo(com.github.basking2.sdsai.itrex.Evaluator,java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"Package","l":"importTo(Evaluator, String)","u":"importTo(com.github.basking2.sdsai.itrex.Evaluator,java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"LogFunction.LEVEL","l":"INFO"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractAggregatingFunction","l":"initialValue"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"INTEGER"},{"p":"com.github.basking2.sdsai.itrex.util","c":"Reflection","l":"isAssignable(Class<?>, Class<?>)","u":"isAssignable(java.lang.Class,java.lang.Class)"},{"p":"com.github.basking2.sdsai.itrex.util","c":"WorkStealingFuture","l":"isCancelled()"},{"p":"com.github.basking2.sdsai.itrex.util","c":"WorkStealingFuture","l":"isDone()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"isIter(Object)","u":"isIter(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TwoTuple","l":"iterator()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"IteratorIterator","l":"IteratorIterator(Iterator<Iterator<T>>)","u":"%3Cinit%3E(java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"IteratorIterator","l":"IteratorIterator(List<Iterator<T>>)","u":"%3Cinit%3E(java.util.List)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"IteratorPackage","l":"IteratorPackage()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"Iterators()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"JavaPackage","l":"java"},{"p":"com.github.basking2.sdsai.itrex.functions.java","c":"JavaFunction","l":"JavaFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"JavaMathPackage","l":"JavaMathPackage()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"JavaPackage","l":"javaNew"},{"p":"com.github.basking2.sdsai.itrex.functions.java","c":"JavaNewFunction","l":"JavaNewFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"JavaPackage","l":"JavaPackage()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"StringPackage","l":"join"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"JoinUncertainIteratorsIterator","l":"join(Executor, UncertainIterator<UncertainIterator<T>>)","u":"join(java.util.concurrent.Executor,com.github.basking2.sdsai.itrex.iterators.splitjoin.UncertainIterator)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"JoinFunction","l":"JoinFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"JoinUncertainIteratorsIterator","l":"joinList(Executor, List<UncertainIterator<T>>)","u":"joinList(java.util.concurrent.Executor,java.util.List)"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"JoinUncertainIteratorsIterator","l":"joinSingle(Executor, UncertainIterator<T>)","u":"joinSingle(java.util.concurrent.Executor,com.github.basking2.sdsai.itrex.iterators.splitjoin.UncertainIterator)"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"JoinUncertainIteratorsIterator","l":"JoinUncertainIteratorsIterator(Executor, List<UncertainIterator<T>>)","u":"%3Cinit%3E(java.util.concurrent.Executor,java.util.List)"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"JoinUncertainIteratorsIterator","l":"JoinUncertainIteratorsIterator(Executor, UncertainIterator<UncertainIterator<T>>)","u":"%3Cinit%3E(java.util.concurrent.Executor,com.github.basking2.sdsai.itrex.iterators.splitjoin.UncertainIterator)"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TwoTuple","l":"l"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"LastFunction","l":"LastFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"LetFunction","l":"LetFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ListFlattenFunction","l":"ListFlattenFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ListFunction","l":"ListFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ZipFunction","l":"LOG"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"LogFunction","l":"LogFunction(LogFunction.LEVEL)","u":"%3Cinit%3E(com.github.basking2.sdsai.itrex.functions.LogFunction.LEVEL)"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"LONG"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"BooleanPackage","l":"lt"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"CompareFunction.OP","l":"LT"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"BooleanPackage","l":"lte"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"CompareFunction.OP","l":"LTE"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"FunctionalPackage","l":"map"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"MappingIterator.Mapper","l":"map(T)"},{"p":"com.github.basking2.sdsai.itrex.functions.functional","c":"MapFunction","l":"MapFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"mapIterator(Iterator<T>, MappingIterator.Mapper<T, R>)","u":"mapIterator(java.util.Iterator,com.github.basking2.sdsai.itrex.iterators.MappingIterator.Mapper)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"MappingIterator","l":"MappingIterator(Iterator<T>, MappingIterator.Mapper<T, R>)","u":"%3Cinit%3E(java.util.Iterator,com.github.basking2.sdsai.itrex.iterators.MappingIterator.Mapper)"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"MappingUncertainIterator","l":"MappingUncertainIterator(UncertainIterator<T>, MappingIterator.Mapper<T, R>)","u":"%3Cinit%3E(com.github.basking2.sdsai.itrex.iterators.splitjoin.UncertainIterator,com.github.basking2.sdsai.itrex.iterators.MappingIterator.Mapper)"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"UncertainIterator.HAS_NEXT","l":"MAYBE"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"mergeOrHandleSorted(Iterator<T1>, Function<T1, K>, Iterator<T2>, Function<T2, K>, BiConsumer<T1, T2>)","u":"mergeOrHandleSorted(java.util.Iterator,java.util.function.Function,java.util.Iterator,java.util.function.Function,java.util.function.BiConsumer)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"mergeSorted(Iterator<T1>, Function<T1, K>, Iterator<T2>, Function<T2, K>, BiConsumer<T1, T2>)","u":"mergeSorted(java.util.Iterator,java.util.function.Function,java.util.Iterator,java.util.function.Function,java.util.function.BiConsumer)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"mergeSortedDescending(Iterator<T1>, Function<T1, K>, Iterator<T2>, Function<T2, K>, BiConsumer<T1, T2>)","u":"mergeSortedDescending(java.util.Iterator,java.util.function.Function,java.util.Iterator,java.util.function.Function,java.util.function.BiConsumer)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"DictPackage","l":"mk"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"NameArgsFunction","l":"NameArgsFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"AugmentableIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"BufferIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ByteBufferInputStreamIteator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"EvaluatingIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"FilterIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"FutureIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"HeadIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"IteratorIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"MappingIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"NullSkippingIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"PagingIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ParallelIteratorIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ParallelMappingIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"RangeIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"CloseableUncertainIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"JoinUncertainIteratorsIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"MappingUncertainIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"SplitMapUncertainIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"UncertainIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ZipIterator","l":"next()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"EvaluatingIterator","l":"next(EvaluationContext)","u":"next(com.github.basking2.sdsai.itrex.EvaluationContext)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"NopFunction","l":"NopFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"BooleanPackage","l":"not"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"NotFunction","l":"NotFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"NullSkippingIterator","l":"NullSkippingIterator(Iterator<T>)","u":"%3Cinit%3E(java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"CloseableUncertainIterator","l":"offer(T)"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"OPEN_BRACKET"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"BooleanPackage","l":"or"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"OrFunction","l":"OrFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"PagingIterator","l":"PagingIterator(int, Iterator<T>)","u":"%3Cinit%3E(int,java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ParallelIteratorIterator","l":"ParallelIteratorIterator(Executor, int, List<Iterator<T>>)","u":"%3Cinit%3E(java.util.concurrent.Executor,int,java.util.List)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ParallelIteratorIterator","l":"ParallelIteratorIterator(Executor, int, List<Iterator<T>>, Consumer<Throwable>)","u":"%3Cinit%3E(java.util.concurrent.Executor,int,java.util.List,java.util.function.Consumer)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ParallelMappingIterator","l":"ParallelMappingIterator(boolean, Iterator<T>, Executor, int, MappingIterator.Mapper<T, R>)","u":"%3Cinit%3E(boolean,java.util.Iterator,java.util.concurrent.Executor,int,com.github.basking2.sdsai.itrex.iterators.MappingIterator.Mapper)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ParallelMappingIterator","l":"ParallelMappingIterator(boolean, Iterator<T>, Executor, int, MappingIterator.Mapper<T, R>, Consumer<Throwable>)","u":"%3Cinit%3E(boolean,java.util.Iterator,java.util.concurrent.Executor,int,com.github.basking2.sdsai.itrex.iterators.MappingIterator.Mapper,java.util.function.Consumer)"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"parse()"},{"p":"com.github.basking2.sdsai.itrex.util","c":"Arguments","l":"parseArgs(Iterator<?>, String)","u":"parseArgs(java.util.Iterator,java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"parseExpression(String)","u":"parseExpression(java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"FunctionalPackage","l":"pipeline"},{"p":"com.github.basking2.sdsai.itrex.functions.functional","c":"PipelineFunction","l":"PipelineFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"PrefetchingIterator","l":"PrefetchingIterator(Executor, int, Iterator<T>)","u":"%3Cinit%3E(java.util.concurrent.Executor,int,java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"AugmentableIterator","l":"prepend(Iterator<T>)","u":"prepend(java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"AugmentableIterator","l":"prepend(T)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"PrintArgsFunction","l":"PrintArgsFunction(PrintStream)","u":"%3Cinit%3E(java.io.PrintStream)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"DictPackage","l":"put"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"QUOTED_STRING"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TwoTuple","l":"r"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"RangeFunction","l":"RangeFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"RangeIterator","l":"RangeIterator(int, int, int)","u":"%3Cinit%3E(int,int,int)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ByteBufferInputStreamIteator","l":"readOrClose(InputStream, byte[])","u":"readOrClose(java.io.InputStream,byte[])"},{"p":"com.github.basking2.sdsai.itrex.util","c":"Reflection","l":"Reflection()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex","c":"EvaluationContext","l":"register(Object, FunctionInterface<? extends Object>)","u":"register(java.lang.Object,com.github.basking2.sdsai.itrex.functions.FunctionInterface)"},{"p":"com.github.basking2.sdsai.itrex","c":"Evaluator","l":"register(Object, FunctionInterface<? extends Object>)","u":"register(java.lang.Object,com.github.basking2.sdsai.itrex.functions.FunctionInterface)"},{"p":"com.github.basking2.sdsai.itrex.functions.function","c":"RegisterFunctionFunction","l":"RegisterFunctionFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractAggregatingFunction.Result","l":"result"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"AbstractAggregatingFunction.Result","l":"Result(boolean, R)","u":"%3Cinit%3E(boolean,R)"},{"p":"com.github.basking2.sdsai.itrex.util","c":"WorkStealingFuture","l":"run(ExecutorService, Callable<T>)","u":"run(java.util.concurrent.ExecutorService,java.util.concurrent.Callable)"},{"p":"com.github.basking2.sdsai.itrex","c":"EvaluationContext","l":"set(Object, Object)","u":"set(java.lang.Object,java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex","c":"EvaluationContext","l":"setArguments(Iterator<?>)","u":"setArguments(java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"EvaluatingIterator","l":"setEvaluationEnabled(boolean)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"SetFunction","l":"SetFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TwoTuple","l":"setL(L)"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TwoTuple","l":"setR(R)"},{"p":"com.github.basking2.sdsai.itrex","c":"SExprRuntimeException","l":"SExprRuntimeException(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex","c":"SExprRuntimeException","l":"SExprRuntimeException(String, Throwable)","u":"%3Cinit%3E(java.lang.String,java.lang.Throwable)"},{"p":"com.github.basking2.sdsai.itrex","c":"SExprRuntimeException","l":"SExprRuntimeException(Throwable)","u":"%3Cinit%3E(java.lang.Throwable)"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionGenerator","l":"SimpleExpressionGenerator(Object)","u":"%3Cinit%3E(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionGenerator","l":"SimpleExpressionGenerator(Object, String)","u":"%3Cinit%3E(java.lang.Object,java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"SimpleExpressionParser(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionUnclosedListException","l":"SimpleExpressionUnclosedListException()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"SKIP_WS"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"EvaluatingIterator","l":"skip()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"skipNulls(Iterator<T>)","u":"skipNulls(java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"StringPackage","l":"split"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"splitMapJoinIterator(Executor, Iterator<T>, Function<T, K>, MappingIterator.Mapper<T, R>)","u":"splitMapJoinIterator(java.util.concurrent.Executor,java.util.Iterator,java.util.function.Function,com.github.basking2.sdsai.itrex.iterators.MappingIterator.Mapper)"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"SplitMapUncertainIterator","l":"SplitMapUncertainIterator(Iterator<T>, Function<T, K>, MappingIterator.Mapper<T, R>)","u":"%3Cinit%3E(java.util.Iterator,java.util.function.Function,com.github.basking2.sdsai.itrex.iterators.MappingIterator.Mapper)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"StringConcatFunction","l":"StringConcatFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"StringJoinFunction","l":"StringJoinFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"StringPackage","l":"StringPackage()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"StringSplitFunction","l":"StringSplitFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"BooleanPackage","l":"t"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"CompareFunction.OP","l":"test(int)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ThreadFunction","l":"ThreadFunction(Executor)","u":"%3Cinit%3E(java.util.concurrent.Executor)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"CastingPackage","l":"toBoolean"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TypeConversion","l":"toBoolean(Object)","u":"toBoolean(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"CastingPackage","l":"toDouble"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TypeConversion","l":"toDouble(Object)","u":"toDouble(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"CastingPackage","l":"toFloat"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TypeConversion","l":"toFloat(Object)","u":"toFloat(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"CastingPackage","l":"toInt"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TypeConversion","l":"toInt(Object)","u":"toInt(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"toIterator(Object)","u":"toIterator(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"toList(Iterator<T>)","u":"toList(java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"CastingPackage","l":"toLong"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TypeConversion","l":"toLong(Object)","u":"toLong(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex.packages","c":"CastingPackage","l":"toString"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TypeConversion","l":"toString(Object)","u":"toString(java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"TraceFunction","l":"TraceFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"TraceFunction","l":"TraceFunction(PrintStream)","u":"%3Cinit%3E(java.io.PrintStream)"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"UncertainIterator.HAS_NEXT","l":"TRUE"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TwoTuple","l":"TwoTuple(L, R)","u":"%3Cinit%3E(L,R)"},{"p":"com.github.basking2.sdsai.itrex.util","c":"TypeConversion","l":"TypeConversion()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.util","c":"Reflection","l":"unbox(Class<?>)","u":"unbox(java.lang.Class)"},{"p":"com.github.basking2.sdsai.itrex","c":"EvaluationContext","l":"update(Object, Object)","u":"update(java.lang.Object,java.lang.Object)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"UpdateFunction","l":"UpdateFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"CompareFunction.OP","l":"valueOf(String)","u":"valueOf(java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"LogFunction.LEVEL","l":"valueOf(String)","u":"valueOf(java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"UncertainIterator.HAS_NEXT","l":"valueOf(String)","u":"valueOf(java.lang.String)"},{"p":"com.github.basking2.sdsai.itrex.functions.bool","c":"CompareFunction.OP","l":"values()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"LogFunction.LEVEL","l":"values()"},{"p":"com.github.basking2.sdsai.itrex.iterators.splitjoin","c":"UncertainIterator.HAS_NEXT","l":"values()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"VersionFunction","l":"VersionFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"LogFunction.LEVEL","l":"WARN"},{"p":"com.github.basking2.sdsai.itrex","c":"SimpleExpressionParser","l":"WORD"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"wrap(T...)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"zip(Iterator<T1>, boolean, T1, Iterator<T2>, boolean, T2)","u":"zip(java.util.Iterator,boolean,T1,java.util.Iterator,boolean,T2)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"Iterators","l":"zip(Iterator<T1>, Iterator<T2>)","u":"zip(java.util.Iterator,java.util.Iterator)"},{"p":"com.github.basking2.sdsai.itrex.functions","c":"ZipFunction","l":"ZipFunction()","u":"%3Cinit%3E()"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ZipIterator","l":"ZipIterator(Iterator<T1>, boolean, T1, Iterator<T2>, boolean, T2)","u":"%3Cinit%3E(java.util.Iterator,boolean,T1,java.util.Iterator,boolean,T2)"},{"p":"com.github.basking2.sdsai.itrex.iterators","c":"ZipIterator","l":"ZipIterator(Iterator<T1>, Iterator<T2>)","u":"%3Cinit%3E(java.util.Iterator,java.util.Iterator)"}];updateSearchResults();